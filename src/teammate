#!/bin/bash

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NO_COLOR='\033[0m'

err(){
  echo ""
  echo -e "‚ùå ${RED}Error: $1${NO_COLOR}"
  echo ""
  exit 1
}

step(){
  echo ""
  echo -e "‚úÖ ${GREEN}Step: $1...${NO_COLOR}"
  echo ""
}

warn(){
  echo -e "‚ö†Ô∏è  ${YELLOW}Warning: $1${NO_COLOR}"
  echo ""
}

# Help
if [ "$1" = "--help" ] || [ "$1" = "-h" ]
then
  echo -e \
	"\n${GREEN}Team Mate üçª${NO_COLOR}\n
  You can use this script to quickly open and share pull request(s) for your project with your team.
  By default the command does a normal push to the server creating a pull request on 'master' branch using the last commit message as pull request tile and adding a label with the name of the branch.
  The default values can be overriden with a config file in the current folder.
  If in the configuration file the notification formatter and hook are defined, a post request is done to share the pull request info with the team.\n
  Options:
   -f               : Force push to the server.\n
   -t \"new title\"   : Set the title used for the pull request and the notification.\n
   -b \"brA( brB)\"   : Set the destination branch(es). It uses space as separator.\n
   -u               : Skip the pull request(s) creation and fetch the first pull request url to send in the notification.\n
   -s               : Silence the notification.\n
   -w               : Add a 'WIP' label to the pull request(s) created.\n
   -T \"team name\"   : Add your team label to the pull request(s) created.\n
   -h               : Print this help.\n
   -l               : List open PR(s).\n
  Note: This script is depending on 'hub', 'git' and 'curl'.\n
  ${GREEN}Developed with ‚ô•Ô∏è (and ‚òïÔ∏è)${NO_COLOR}
  Repository: https://github.com/FabriSilve/TeamMate\n"

  exit 0
fi

## Version
if [ "$1" = "--version" ] || [ "$1" = "-v" ]
then
  echo -e "${GREEN}teammate v1.4.1${NO_COLOR}"
  exit 0
fi

# Check dependencies
DEPENDENCIES='hub git curl'
for dep in $DEPENDENCIES; do
	if ! [ -x "$(command -v $dep)" ]; then
  	err "$dep is not installed."
	fi
done

# Defaults
PR_TITLE=$(git log --oneline -n 1 | sed 's;^[0-9a-zA-Z]*[\ ]*;;')
PR_BRANCHES="master"

PUSH_FORCE=0
UPDATE=0
WIP=0
NOTIFY=0
TEAM=''
LIST=0

# Load config file
if [ -e ./.team ]
then
    step "Found config file"
    . ./.team

    if [ -n "$DEFAULT_BRANCH" ]
    then
      PR_BRANCHES=$DEFAULT_BRANCH
    fi

    if [ -n "$NOTIFICATION_HOOK" ] && [ "$(type -t FORMATTER)" == 'function' ]
    then
      NOTIFY=1
    fi
fi

# User data
USR_DATA=$(git log -n 1 | grep Author)
AUTHOR=$(echo $USR_DATA | sed 's/Author:\ //' | sed 's/\<.*//')
GIT_EMAIL=$(echo $USR_DATA | grep Author | sed 's/[^\<]*\<//' | sed 's/\>.*//')

# Inputs
while getopts t:b:fuwslT: option; do
  case "${option}" in
    t) PR_TITLE=${OPTARG};;
    b) PR_BRANCHES=${OPTARG};;
    f) PUSH_FORCE=1;;
    u) UPDATE=1;;
    w) WIP=1;;
    s) NOTIFY=0;;
    T) TEAM=${OPTARG};;
    l) LIST=1;;
  esac
done

# List open PR(s)
if [ "$LIST" = "1" ]
then
  hub pr list
  exit 0
fi

# Pushing the branch
if [ "$PUSH_FORCE" = "0" ]
then
  if ! git push -u
  then
    err "Cannot push the branch! Do you need to push force?"
  fi
else
  warn "Force pushing the branch"
  if ! git push -f
  then
    err "Cannot push the branch!"
  fi
fi

step "Branch successfully pushed"

PR_URL=""
MESSAGE="Can you review my new pull request?"
LABELS=""

# Set additional labels
if [ "$WIP" = "1" ]; then
  LABELS="$LABELS,WIP"
  MESSAGE="I opened a WIP pull request. Can you give me an early feedback?"
fi
if [ ! -z "$TEAM" ]; then
  LABELS="$LABELS,$TEAM"
fi


if [ "$UPDATE" = "1" ]
then
  # Update pr(s)
  PR_URL=$(hub pr show -u)
  if [ "$?" = "1" ]; then err "Could not find any existing pull request. Should you try without the -u option?"; fi
  MESSAGE="I updated my pull request. Can you review again?"
else
  # Opening pr(s)
  for branch in $PR_BRANCHES
  do
    PR_URL=$(hub pull-request -m "$PR_TITLE" -b $branch -l "$branch$LABELS")
    if [ "$?" = "1" ]; then err "Could not open a pull request to $branch. Did you forget to use the -u or -b option?"; fi
  done
fi

step "Pull request(s) correctly syncronized"

# Send Notification
if [ "$NOTIFY" = "1" ]
then
  FORMATTER "$AUTHOR" "$MESSAGE" "$PR_URL" "$PR_TITLE"
  curl -f -X POST \
    $NOTIFICATION_HOOK \
    -H 'Content-Type: application/json' \
    -H 'cache-control: no-cache' \
    -d "$NOTIFICATION" > /dev/null 2>&1

  if [ "$?" != "0" ]; then err "Could not send notification. You should check your config file."; fi
  step "Notification sent!"
fi

exit 0
